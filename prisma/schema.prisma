// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// DND 5e data

// ALL ENUMS NEED A NULL VALUE FOR THE FRONT END TO WORK PROPERLY
enum Ability {
  STR
  CON
  DEX
  INT
  WIS
  CHA
  NULL
}

enum Size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
  NULL
}

enum SpellSchool {
  ABJURATION
  CONJURATION
  DIVINATION
  ENCHANTMENT
  EVOCATION
  ILLUSION
  NECROMANCY
  TRANSMUTATION
  NULL
}

enum Skill {
  ACROBATICS
  ANIMAL_HANDLING
  ARCANA
  ATHLETICS
  DECEPTION
  HISTORY
  INSIGHT
  INTIMIDATION
  INVESTIGATION
  MEDICINE
  NATURE
  PERCEPTION
  PERFORMANCE
  PERSUASION
  RELIGION
  SLEIGHT_OF_HAND
  STEALTH
  SURVIVAL
  NULL
}

enum Language {
  COMMON
  DWARVISH
  ELVISH
  GIANT
  GNOMISH
  GOBLIN
  HALFLING
  ORC
  ABYSSAL
  CELESTIAL
  DRACONIC
  DEEP_SPEECH
  INFERNAL
  PRIMORDIAL
  SYLVAN
  UNDERCOMMON
  NULL
}

enum ArmorTypes {
  LIGHT
  MEDIUM
  HEAVY
  SHIELDS
  NULL
}

enum DamageTypes {
  ACID
  BLUDGEONING
  COLD
  FIRE
  FORCE
  LIGHTNING
  NECROTIC
  PIERCING
  POISON
  PSYCHIC
  RADIANT
  SLASHING
  THUNDER
  NONE
  NULL
  OTHER
}

enum CreatureType {
  ABERRATION
  BEAST
  CELESTIAL
  CONSTRUCT
  DRAGON
  ELEMENTAL
  FEY
  FIEND
  GIANT
  HUMANOID
  MONSTROSITY
  OOZE
  PLANT
  UNDEAD
  NULL
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String     @unique
  password   String
  Classes    Class[]
  SubClasses SubClass[]
  Races      Race[]

  Background Background[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Spell     Spell[]
  Messages  Message[]
}

model Class {
  id                       Int           @id @default(autoincrement())
  srd                      Boolean       @default(false)
  name                     String
  description              String
  hitDie                   Int
  savingThrows             Ability[]
  skills                   Skill[]
  skillChoiceCount         Int
  SubClasses               SubClass[]
  subClassName             String
  subClassDesc             String
  subfeatLevels            Int[]
  multiclassing            String
  Features                 Feature[]
  tools                    String[]
  abilityScoreLevels       Int[]
  equipment                String[]
  armor                    ArmorTypes[]
  weapons                  String[]
  customFields             CustomField[]
  subClassSpellDescription String? //If the class has spells given by subclass, describe here
  flavorText               String        @db.VarChar(200)
  //spellcasting
  spellCaster              Boolean       @default(false)
  spellCastingAbility      Ability?
  casterType               CasterType?   @relation(fields: [casterTypeId], references: [id])
  ritualCaster             Boolean       @default(false) // can you cast spells as rituals
  ritualSpellPrepared      Boolean       @default(true) //do you need to have a spell prepared to cast it as a ritual
  spellFocus               String        @default("None")
  casterTypeId             Int           @default(1)
  spellCastingInfo         String? // How does spell casting work for this class
  displaySpellList         Boolean       @default(true) // This is for displaying the spell list on the class table. Some classes (like warlock), have a weird spell casting system and opt to use the custom table fields instead.
  prepareSpellInfo         String? // How do spells get prepared for this class
  SpellList                SpellList?    @relation(fields: [spellListId], references: [id]) // If the class has a spell list, link it here
  //these two fields will presume that a customField is created in the class table
  // deafults to 0, meaning the class does not have a set number of spells known
  //otherwise, the number indicates the first level in which they have spells known
  spellsKnown              Int           @default(0) // Does the class have a set number of spells known
  cantripsKnown            Int           @default(0) // Does the class have a set number of cantrips known

  source    String   @default("Player's Handbook") //source of the class
  //date fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User        User? @relation(fields: [userId], references: [id])
  userId      Int?
  spellListId Int?
}

model Spell {
  id               Int                @id @default(autoincrement())
  srd              Boolean            @default(false)
  name             String
  description      String
  duration         String
  range            String
  castingTime      String
  verbal           Boolean            @default(false)
  somatic          Boolean            @default(false)
  material         Boolean            @default(false)
  materialCost     String?
  concentration    Boolean            @default(false)
  ritual           Boolean            @default(false)
  upcastInfo       String?
  //search fields
  tags             String[]
  saveRequired     Boolean            @default(false)
  damageType       DamageTypes?
  aoe              Boolean            @default(false)
  conditions       String[]
  options          String[] // If the spell has options to choose from, list here  
  /// [Table]
  extendedTable    Json[] // This table will be rendered with the spell
  postTableData    String? // This is for any additional content that should be displayed after the table
  school           SpellSchool
  level            Int //0 is cantrip, 1-9 are spell levels
  source           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SpellListToSpell SpellListToSpell[]
  User             User?              @relation(fields: [userId], references: [id])
  userId           Int?
}

model SpellListToSpell {
  spellListId Int       @map("spellListId")
  spellId     Int       @map("spellId")
  spellList   SpellList @relation(fields: [spellListId], references: [id])
  Spell       Spell     @relation(fields: [spellId], references: [id])

  @@id([spellListId, spellId]) // Composite primary key
}

model SpellList {
  id   Int    @id @default(autoincrement())
  name String

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SpellListToSpell SpellListToSpell[]
  Class            Class[]
}

model SubClass {
  id                  Int               @id @default(autoincrement())
  srd                 Boolean           @default(false)
  name                String
  description         String
  SubClassFeatures    SubClassFeature[]
  flavorText          String            @db.VarChar(200)
  source              String            @default("Player's Handbook")
  //spellcasting
  ritualCaster        Boolean           @default(false) // can you cast spells as rituals
  spellCaster         Boolean           @default(false)
  ritualSpellPrepared Boolean           @default(true) //do you need to have a spell prepared to cast it as a ritual
  spellFocus          String?
  spellCastingAbility Ability?
  casterType          CasterType?       @relation(fields: [casterTypeId], references: [id])
  casterTypeId        Int               @default(3)
  spellCastingInfo    String? // How does spell casting work for this class
  prepareSpellInfo    String? // How do spells get prepared for this class
  customFields        CustomField[] // Custom fields for the subclass spellcasting

  //these two fields will presume that a customField is created in the class table
  // deafults to 0, meaning the class does not have a set number of spells known
  //otherwise, the number indicates the first level in which they have spells known
  spellsKnown   Int @default(0) // Does the class have a set number of spells known
  cantripsKnown Int @default(0) // Does the class have a set number of cantrips known

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Class     Class?   @relation(fields: [classId], references: [id])
  classId   Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model CustomField {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  level1      String
  level2      String
  level3      String
  level4      String
  level5      String
  level6      String
  level7      String
  level8      String
  level9      String
  level10     String
  level11     String
  level12     String
  level13     String
  level14     String
  level15     String
  level16     String
  level17     String
  level18     String
  level19     String
  level20     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Class       Class?    @relation(fields: [classId], references: [id])
  classId     Int?
  SubClass    SubClass? @relation(fields: [subClassId], references: [id])
  subClassId  Int?
}

model CasterType {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  level1      Int[]
  level2      Int[]
  level3      Int[]
  level4      Int[]
  level5      Int[]
  level6      Int[]
  level7      Int[]
  level8      Int[]
  level9      Int[]
  level10     Int[]
  level11     Int[]
  level12     Int[]
  level13     Int[]
  level14     Int[]
  level15     Int[]
  level16     Int[]
  level17     Int[]
  level18     Int[]
  level19     Int[]
  level20     Int[]
  Class       Class[]
  examples    String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  SubClass    SubClass[]
}

model Feature {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  levels        Int[]
  options       String[] // If the feature has options to choose from, list here
  table         String[] // optionally dedicate a column in the table
  /// [Table]
  extendedTable Json[] // This table will be rendered with the feature

  spellCastingFeature Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Class               Class?   @relation(fields: [classId], references: [id])
  classId             Int?
}

model SubClassFeature {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  levels        Int[]
  options       String[] // If the feature has options to choose from, list here
  /// [Table]
  extendedTable Json[] // This table will be rendered with the feature

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  SubClass   SubClass @relation(fields: [subClassId], references: [id])
  subClassId Int
}

model Race {
  id          Int     @id @default(autoincrement())
  srd         Boolean @default(false)
  name        String
  description String
  flavortext  String  @db.VarChar(200)
  source      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model RaceVariant {
  id            Int       @id @default(autoincrement())
  srd           Boolean   @default(false)
  name          String
  description   String
  flavortext    String    @db.VarChar(200)
  source        String
  //FIXME: MAKE CUSTOM JSON TYPE
  abilityScores Ability[]

  creatureType CreatureType
  size         Size
  speed        Int

  flightSpeed Int?
  swimSpeed   Int?
  climbSpeed  Int?

  flightDescription String?
  swimDescription   String?
  climbDescription  String?

  originLanguages     Language[]
  languageDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RacialTraits {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  /// [Table]
  extendedTable Json[]
  options       String[] // If the feature has options to choose from, list here

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Background {
  id                  Int                 @id @default(autoincrement())
  srd                 Boolean             @default(false)
  name                String
  description         String
  source              String              @default("Player's Handbook")
  flavorText          String              @db.VarChar(200)
  skillProficiencies  Skill[]
  skillChoiceCount    Int
  toolProficiencies   String[]
  languages           Language[]
  languageChoiceCount Int
  equipment           String[]
  Features            BackgroundFeature[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  User                User?               @relation(fields: [userId], references: [id])
  userId              Int?
}

model BackgroundFeature {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  /// [Table]
  extendedTable Json[]
  options       String[] // If the feature has options to choose from, list here

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Background   Background? @relation(fields: [backgroundId], references: [id])
  backgroundId Int?
}

model Feat {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  source      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Weapon {
  id           Int         @id @default(autoincrement())
  name         String
  cost         String
  damage       String
  damageType   DamageTypes
  weight       String
  versatileDmg String?
  range        String?
  isSimple     Boolean
  isRanged     Boolean
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  WeaponToProperties WeaponToProperty[]
}

model WeaponProperty {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  WeaponToProperty WeaponToProperty[]
}

model WeaponToProperty {
  weaponId         Int
  weapon           Weapon         @relation(fields: [weaponId], references: [id])
  weaponPropertyId Int
  weaponProperty   WeaponProperty @relation(fields: [weaponPropertyId], references: [id])

  @@id([weaponId, weaponPropertyId]) // Composite primary key
}

model Message {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  email     String?
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
